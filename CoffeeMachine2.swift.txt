import Cocoa

var str = "Hello, playground"
class Order{
    var userName: String
    var orderID: Int
    var drinks: [Drink] = []
    var cups: [Cup] = []
    static var idFactory = 0
    
    init(userName: String, drinks: [Drink]){
        Order.idFactory += 1
        self.orderID = Order.idFactory
        self.userName = userName
        self.drinks = drinks
    }
    
    func addCup(_ cup: Cup){
        cups.append(cup)
    }
}

enum DrinkType{
    case Coffee
    case Cappuchino
}

struct Drink{
    var type: DrinkType
    var sugarAmount: Int
}

class Machine{
    var orders: [[Order]] = Array(repeating: [], count: 10)
    var waitingOrders = 0
    lazy var preparer = Preparer(machine: self)
    var timer : Timer?
    
    init(){
        timer = Timer.scheduledTimer(withTimeInterval: 5000, repeats: true){ timer in
        for index in 1..<10{
            self.orders[index-1].append(contentsOf: self.orders[index])
            self.orders[index].removeAll()
        }
        }
    }
    
    deinit {
        if let timer = timer{
            timer.invalidate()
        }
    }
    
    func takeOrder(order: Order, priority: Int){
        orders[priority].append(order)
        waitingOrders += 1
    }
    
    func startProcessingOrder() -> Order?{
        for index in 0..<orders.count{
            if !orders[index].isEmpty{
                waitingOrders -= 1
                return orders[index].remove(at: 0)
            }
        }
        return nil
    }
    
    func endOrder(_ order: Order){
        
    }
    
    func isThereWaiting() -> Bool{
        return waitingOrders != 0
    }
    
}

class Preparer{
    static var MAX_CAPACITY = 5
    var processors: [Processor] = []
    var machine: Machine
    
    
    init(machine: Machine) {
        self.machine = machine
        for _ in 0..<Preparer.MAX_CAPACITY{
            processors.append(Processor())
        }
        dispatchOrder()
    }
    func dispatchOrder(){
        while true{
            if machine.isThereWaiting(){
                for processor in processors{
                    if processor.isAvailable(){
                        if let order = machine.startProcessingOrder(){
                            processor.assignOrder(order: order, machine: machine)
                        }
                    }
                }
            }
        }
    }
}

class Processor{
    var available = true
    var lock = NSLock()
    //var order:Order?
    //var machine: Machine?
    func isAvailable() -> Bool{
        return available
    }
    
    func processDrink(_ drink: Drink) -> Cup{
        let recipe = Resources.getResources(for: drink)
        var milkRequired = recipe[Ingredient.Milk] != nil
        var waterRequired = recipe[Ingredient.Water] != nil
        var coffeeRequired = recipe[Ingredient.Coffee] != nil
        var sugarRequired = recipe[Ingredient.Sugar] != nil
        let cup = Cup()
        
        while( milkRequired || waterRequired || coffeeRequired || sugarRequired){
            if (milkRequired){
                milkRequired = !Resources.pourMilk(recipe[Ingredient.Milk] ?? 0, in: cup)
            }
            
            if (waterRequired){
                waterRequired = !Resources.pourWater(recipe[Ingredient.Water] ?? 0, in: cup)
            }
            
            if (coffeeRequired){
                coffeeRequired = !Resources.addCoffee(recipe[Ingredient.Coffee] ?? 0, in: cup)
            }
            
            if (sugarRequired){
                sugarRequired = Resources.addSugar(recipe[Ingredient.Sugar] ?? 0, in: cup)
            }
        }
        return cup
    }
    
    func assignOrder(order: Order, machine: Machine){
        //self.order = order
        //self.machine = machine
        available = false
        for drink in order.drinks{
            DispatchQueue.global().async { [weak self] in
                if let self = self{
                    let cup = self.processDrink(drink)
                    order.addCup(cup)
                    if order.cups.count == order.drinks.count && !self.isAvailable(){
                        machine.endOrder(order)
                        self.available = true
                    }
                    
                }
            }
        }
    }
}

enum Ingredient{
    case Milk
    case Water
    case Sugar
    case Coffee
}

class Cup{
    var contents: [Ingredient: Int] = [:]
    
    func add(_ resource: Ingredient, amount: Int){
        contents[resource] = amount
    }
}

struct Resources{
    static var milkLock = NSLock()
    static var waterLock = NSLock()
    static var sugarLock = NSLock()
    static var coffeeLock = NSLock()
    
    static func getResources(for drink: Drink) -> [Ingredient:Int]{
        // connect to the Database if not connected
        //send query to get recipe for this drink
        // return recipe
        return [Ingredient.Milk:20, Ingredient.Water: 15, Ingredient.Coffee: 3]
    }
    
    static func pourMilk(_ amount: Int, in cup: Cup) -> Bool{
        if milkLock.try(){
            cup.add(Ingredient.Milk, amount: amount)
            Thread.sleep(forTimeInterval: Double(4*amount))
            milkLock.unlock()
            return true
        }
        return false
    }
    
    static func pourWater(_ amount: Int, in cup: Cup) -> Bool{
        if waterLock.try(){
            cup.add(Ingredient.Water, amount: amount)
            Thread.sleep(forTimeInterval: Double(1 * amount))
            waterLock.unlock()
            return true
        }
        return false
    }
    
    static func addSugar(_ amount: Int, in cup: Cup) -> Bool{
        if sugarLock.try(){
            cup.add(Ingredient.Milk, amount: amount)
            Thread.sleep(forTimeInterval: Double(2*amount))
            sugarLock.unlock()
            return true
        }
        return false
    }
    
    static func addCoffee(_ amount: Int, in cup: Cup) -> Bool{
        if coffeeLock.try(){
            cup.add(Ingredient.Milk, amount: amount)
            Thread.sleep(forTimeInterval: Double(1*amount))
            coffeeLock.unlock()
            return true
        }
        return false
    }
}